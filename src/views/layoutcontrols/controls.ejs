<div id="controls" class="col">
    <script src="/js/structuredEditorScripts.js" defer></script>

    <form id="controlsForm" method="post" action="/" style="padding-top: 5px;">
    <button type="submit" id='cola' class="btn btn-primary btn-lg btn-block">Apply Layout</button>
    <br>
    <hr>


     <!-- HERE, we should be able to choose between structured and yaml.  -->
    <!-- Toggle Buttons -->
    <div class="btn-group" role="group" aria-label="Editor Toggle">
        <button type="button" class="btn btn-outline-primary active" id="showYamlEditor">YAML View</button>
        <button type="button" class="btn btn-outline-primary" id="showStructuredEditor" >No Code View</button>
    </div>    

    <div class="form-group" id="yamlEditorControls">
        <%- include('yamlEditor') %>
    </div>
    <div class="form-group" id="structuredEditorControls" style="display: none;">
        <%- include('structuredEditor') %>
    </div>

    <!-- And here, we are in actual controls terroir. -->


    <br>
    <div class="form-group" id="alloyDatumControlSection">
        <label for="alloydatum" class="btn btn-outline-dark btn-sm" id="alloyinstancelabel"
            style="cursor: pointer;">Edit Datum</label>
        <textarea class="form-control" id="alloydatum" rows="5" name="alloydatum"
            style="display: none;"><%= alloyDatum ? alloyDatum : '' %></textarea>
    </div>
    <br>
    
    <div class="form-group d-none" id="temporalInstanceNumberControl">
        <label for="instancenumber">Temporal Instance Number</label>
        <input type="number" class="form-control" id="instancenumber" name="instancenumber"
            value="<%- instanceNumber %>">
    </div>


    <!-- Here, projections is a list of type { type : string, projectedAtom : string, atoms : string[]} 
     If projections is non-empty, then show each type as a form input  and projectedAtom as the selected element of atoms
    -->



    </form>

    <!-- Modal for logging info.-->
    <div class="modal fade" id="loggingInfoModal" tabindex="-1" role="dialog"
        aria-labelledby="loggingInfoModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="loggingInfoModalLabel">Logging Information</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    By enabling logging, you allow us to examine your <b>anonymized</b>
                    specifications and diagrams in order
                    to improve Cope and Drag, and understand its effectiveness.
                    <br><br>
                    Have questions? <a
                        href="https://docs.google.com/forms/d/e/1FAIpQLSdQcAlnW86OLlpmFovEiviToq5WMU10N4U_pz01N-9LUJ4qzQ/viewform?usp=dialog"
                        target="_blank">Fill out this form</a>.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/js-yaml@4.1.0/dist/js-yaml.min.js"></script>
<!-- Include CodeMirror CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
<!-- Include CodeMirror JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
<!-- Include CodeMirror YAML mode -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/yaml/yaml.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {

        // THis has to do with the Alloy inst.
        var alloyInstanceLabel = document.getElementById('alloyinstancelabel');
        var alloyDatumTextarea = document.getElementById('alloydatum');

        alloyInstanceLabel.addEventListener('click', function () {
            if (alloyDatumTextarea.style.display === 'none') {
                alloyDatumTextarea.style.display = 'block';
            } else {
                alloyDatumTextarea.style.display = 'none';
            }
        });

        const showYamlEditorButton = document.getElementById('showYamlEditor');
        const showStructuredEditorButton = document.getElementById('showStructuredEditor');

        let yamlEditorControls = document.getElementById('yamlEditorControls');
        let structuredEditorControls = document.getElementById('structuredEditorControls');

        function showYamlEditor() {
            yamlEditorControls.style.display = 'block';
            showYamlEditorButton.classList.add('active');
            showStructuredEditorButton.classList.remove('active');
            structuredEditorControls.style.display = 'none';

            // And add to local storage
            localStorage.setItem('editorView', 'yaml');
        }

        function showStructuredEditor() {
            yamlEditorControls.style.display = 'none';
            structuredEditorControls.style.display = 'block';
            showStructuredEditorButton.classList.add('active');
            showYamlEditorButton.classList.remove('active');

            // And add to local storage
            localStorage.setItem('editorView', 'structured');
        }

        // Check local storage for the editor view preference
        const editorView = localStorage.getItem('editorView');
        if (editorView === 'structured') {
            populateStructuredEditor();
            showStructuredEditor();
        } else {
            showYamlEditor();
        }



        // Show YAML Editor and hide Structured Editor
        showYamlEditorButton.addEventListener('click', function () {
            writeToYAMLEditor();
            showYamlEditor();
        });

        // Show Structured Editor and hide YAML Editor
        showStructuredEditorButton.addEventListener('click', function () {
            // First set up the structured editor from the YAML contents.
            populateStructuredEditor();
            showStructuredEditor();
        });


        const form = document.getElementById('controlsForm');
        const submitButton = document.getElementById('cola');
        const loggingEnabled = document.getElementById('loggingEnabled'); // Reference the loggingEnabled element

        // Add a submit event listener to the form
        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Set the class of the button to spinner
            submitButton.classList.add('spinner-border', 'spinner-border-sm');
            submitButton.setAttribute('disabled', 'disabled'); // Disable the button



            // Find all form controls with IDs ending in "_projection"
            const projectionControls = document.querySelectorAll('[id$="_projection"]');

            // Add each projection control's value as a hidden input to the form
            projectionControls.forEach(control => {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = control.name; // Use the control's name as the input name
                hiddenInput.value = control.value; // Use the control's value as the input value
                form.appendChild(hiddenInput);
            });

            // Add the loggingEnabled value to the logging object
            const loggingObject = {
                loggingEnabled: loggingEnabled.value // Get the value of the loggingEnabled select element
            };

            form.appendChild(loggingEnabled); // Append the loggingEnabled element to the form
           

            // Check if the structured editor is in view
            const structuredEditorControls = document.getElementById('structuredEditorControls');
            if (structuredEditorControls.style.display === 'block') {
                writeToYAMLEditor(); // Sync structured editor data to YAML editor
            }



            // I also want the value of the scale factor to be read.
            const scaleFactorInput = document.getElementById('scaleFactor');
            let scaleFactorValue = 5; // Default to 5
            if (scaleFactorInput) {
                scaleFactorValue = scaleFactorInput.value || 5;
            }
            const scaleFactorHiddenInput = document.createElement('input');
            scaleFactorHiddenInput.type = 'hidden';
            scaleFactorHiddenInput.name = 'scaleFactor';
            scaleFactorHiddenInput.value = scaleFactorValue;
            form.appendChild(scaleFactorHiddenInput);


            form.submit(); // Submit the form
        });




    });
</script>