<div id="controls" class="col">
    <div class="d-flex flex-column gap-2 p-1">
        <button id='cola' class="btn btn-primary btn-lg m-1 px-4">Apply Layout</button>
        <hr>

        <div id="status" class="status info">Ready to load Alloy graph...</div>
        
        <div id="webcola-cnd-container">
            <!-- React component mounted here -->
        </div>

        <!-- And here, we are in actual controls terroir. -->

        <br>
        <div id="alloyDatumControlSection">
            <label for="alloydatum" class="btn btn-outline-dark btn-sm" id="alloyinstancelabel"
                style="cursor: pointer;">Edit Datum</label>
            <textarea id="alloydatum" rows="5" name="alloydatum"
                style="display: none;"><%= alloyDatum ? alloyDatum : '' %></textarea>
        </div>
        <br>
        
        <!-- TODO: Revisit whether this is needed -->
        <div class="d-none" id="temporalInstanceNumberControl">
            <label for="instancenumber">Temporal Instance Number</label>
            <input type="number" id="instancenumber" name="instancenumber"
                value="<%- instanceNumber %>">
        </div>


        <!-- Here, projections is a list of type { type : string, projectedAtom : string, atoms : string[]} 
        If projections is non-empty, then show each type as a form input  and projectedAtom as the selected element of atoms
        -->

    </div>
</div>

<!-- Include graph-related functionality -->
<script src="/js/graphScripts.js" onerror="console.error('Failed to load graphScripts.js')"></script>

<script>
    /**
     * Update status display with proper styling
     * @param {string} message - Status message to display
     * @param {string} type - Status type: 'info', 'success', 'error'
     */
    function updateStatus(message, type = 'info') {
        const statusElement = document.getElementById('status');
        statusElement.textContent = message;
        statusElement.className = `status ${type}`;
    }

    // Auto-initialize when page loads
    window.addEventListener('load', () => {
        if (window.GraphAPI) {
            window.GraphAPI.initializePipeline();
            console.log('GraphAPI initialized.');
        }
        
        // Mount React component if available
        if (window.mountCndLayoutInterface) {
            window.mountCndLayoutInterface();
        }

        // Mount error message system
        if (window.mountErrorMessageModal) {
            window.mountErrorMessageModal();
        }
    });

    document.addEventListener('DOMContentLoaded', function () {

        // This is the text area input for the Alloy datum.
        var alloyInstanceLabel = document.getElementById('alloyinstancelabel');
        var alloyDatumTextarea = document.getElementById('alloydatum');

        alloyInstanceLabel.addEventListener('click', function () {
            if (alloyDatumTextarea.style.display === 'none') {
                alloyDatumTextarea.style.display = 'block';
            } else {
                alloyDatumTextarea.style.display = 'none';
            }
        });

        // Add onClick event listener to the button
        const submitButton = document.getElementById('cola');
        submitButton.addEventListener('click', async function (event) {
            console.log('Apply Layout button clicked');
            // Set the class of the button to spinner
            submitButton.classList.add('spinner-border', 'spinner-border-sm');
            submitButton.setAttribute('disabled', 'disabled'); // Disable the button

            // Add each projection control's value as a hidden input to the form
            // const projectionControls = document.querySelectorAll('[id$="_projection"]');

            // projectionControls.forEach(control => {
            //     const hiddenInput = document.createElement('input');
            //     hiddenInput.type = 'hidden';
            //     hiddenInput.name = control.name; // Use the control's name as the input name
            //     hiddenInput.value = control.value; // Use the control's value as the input value
            //     form.appendChild(hiddenInput);
            // });

            await window.GraphAPI.renderGraph();

            // Set the class of the button to spinner
            submitButton.classList.remove('spinner-border', 'spinner-border-sm');
            submitButton.removeAttribute('disabled', 'disabled'); // Disable the button
        });
    });

    /** 
     * TODO:
     * - Retrieve the CnD spec from the component to render in the diagram
    */

    window.addEventListener('load', () => {

        // Check for existence of global functions from cnd-core CDN
        if (window.CnDCore) {
            window.DataAPI = CnDCore.DataAPI;
            window.ErrorAPI = CnDCore.ErrorAPI;
            console.log('CnDCore loaded successfully.');
        } else {
            console.error('Error: CnDCore is not loaded. Please check that the proper version of cnd-core CDN (1.0.14 and above) is included.');
            return;
        }

        if (window.mountCndLayoutInterface) {
            window.mountCndLayoutInterface();
        }
    });
</script>