<!-- TODO: This should be much more meaningful, errors should be toggleable, etc etc. -->
 <!-- For example, you should be able to explore errors in terms of the SOURCE LANG, THE INTERMEDIATE REPRESENTATION,
  and eventually counter-factuals? -->

<div class="container m4" id="error_container">
    <% if (errors && errors.length > 0) { %>
        <div id="error_messages" style="border: 2px solid darkred; padding: 1.5rem; border-radius: 0.5rem;">
            <h4 style="color: darkred">Could not produce a diagram</h4>
            <%- errors %>
        </div>
        <!-- Feedback Modal Trigger -->
        <p>
          <a href="#" data-toggle="modal" data-target="#feedbackModal">
            <strong>Confused by this error message?</strong>
          </a>
        </p>
    <% } %>

    <div id="runtime_messages" class="container"></div>

   
</div>

<!-- Feedback Modal -->
<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="feedbackForm" onsubmit="return false;">
        <div class="modal-header">
          <h5 class="modal-title" id="feedbackModalLabel">Feedback</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="feedback"><strong>Let us know whatâ€™s unclear or how we could improve it:</strong></label>
            <textarea id="feedback" name="feedback" class="form-control" rows="3" placeholder="Your feedback..."></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-dark">Submit Feedback</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const errorContainer = document.getElementById('error_container');
        const errorMessages = document.getElementById('error_messages');
        const runtimeMessages = document.getElementById('runtime_messages');

        // Show the error container if error_messages exists
        if (errorMessages) {
            errorContainer.style.display = 'block';
        }

        // Observe changes to runtime_messages
        const observer = new MutationObserver(() => {
            if (runtimeMessages.innerHTML.trim().length > 0) {
                errorContainer.style.display = 'block';
            }
        });

        observer.observe(runtimeMessages, { childList: true, subtree: true });

        const feedbackForm = document.getElementById('feedbackForm');

        feedbackForm.addEventListener('submit', async (e) => {
            e.preventDefault(); // Prevent form from reloading the page

            let errorContent = "";

            if (document.getElementById('error_messages')) {
                errorContent = document.getElementById('error_messages').innerHTML;
            }
            // Check if there are any runtime errors
            let runTimeErrors = document.getElementById('runtime_messages').innerHTML;
            if (runTimeErrors && runTimeErrors.trim().length > 0) {
                errorContent += "<br>" + runTimeErrors;
            }

            let instanceNumber = document.getElementById('instancenumber').value;
            let alloyDatum = document.getElementById('alloydatum').value;
            let cnd = window.editor.getValue() || "";
            // Construct the request body
            const body = {
                alloydatum: alloyDatum, 
                cnd: cnd, 
                feedback: document.getElementById('feedback').value,
                error: errorContent,
                instanceNumber: instanceNumber
            };

            try {
                // Send POST request to /feedback
                const response = await fetch('/feedback', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });

                if (response.ok) {
                    document.getElementById('feedback').style.border = '2px solid green';
                } else {
                    alert('An error occurred while submitting feedback.');
                }
            } catch (err) {
                alert('An error occurred while submitting feedback.');
            }
        });
    });
</script>