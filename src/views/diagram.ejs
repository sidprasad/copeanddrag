<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Cope and Drag</title>

    <!-- Include Bootstrap CSS, JQuery, etc -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <link rel="icon" type="image/svg+xml" href="/img/logo.svg">
    <link rel="stylesheet" href="/css/diagramstyle.css">

    <script src="https://marvl.infotech.monash.edu/webcola/extern/graphlib-dot.min.js"></script>
    <!-- Full version -->
    <script src="https://marvl.infotech.monash.edu/webcola/cola.min.js"></script>

    <!-- Include d3 here -->
    <script src="https://d3js.org/d3.v4.min.js"></script>

    <!-- Include your custom JavaScript file -->
    <script src="/js/renderer.js" defer></script>

    <script>

function downloadHighResPNG(scaleFactor = 3) {
                const svg = document.getElementById("svg");
                const serializer = new XMLSerializer();
                let source = serializer.serializeToString(svg);

                // Ensure proper XML declaration
                source = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + source;

                // Get the CSS styles
                const styleSheets = Array.from(document.styleSheets).reduce((acc, styleSheet) => {
                    try {
                        return acc + Array.from(styleSheet.cssRules).reduce((css, rule) => css + rule.cssText, '');
                    } catch (e) {
                        console.warn('Could not load stylesheet:', styleSheet.href);
                        return acc;
                    }
                }, '');

                // Embed the CSS styles into the SVG
                const styleElement = `<style type="text/css"><![CDATA[${styleSheets}]]></style>`;
                source = source.replace('</svg>', `${styleElement}</svg>`);

                // Convert SVG string to a data URL
                const svgBlob = new Blob([source], { type: "image/svg+xml;charset=utf-8" });
                const url = URL.createObjectURL(svgBlob);

                const img = new Image();
                img.onload = function () {
                    // Create a canvas with increased resolution
                    const canvas = document.createElement("canvas");
                    const ctx = canvas.getContext("2d");

                    const width = svg.getBoundingClientRect().width * scaleFactor;
                    const height = svg.getBoundingClientRect().height * scaleFactor;

                    canvas.width = width;
                    canvas.height = height;

                    // Fill the canvas with a white background
                    ctx.fillStyle = "white";
                    ctx.fillRect(0, 0, canvas.width, canvas.height);

                    // Scale up the drawing for better quality
                    ctx.scale(scaleFactor, scaleFactor);
                    ctx.drawImage(img, 0, 0, width / scaleFactor, height / scaleFactor);

                    // Convert to PNG and trigger download
                    const pngUrl = canvas.toDataURL("image/png");
                    const a = document.createElement("a");
                    a.href = pngUrl;
                    a.download = "cnd.png";
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                };

                img.src = url;
            }


        window.addEventListener('load', function () {

            var width = <%- width %>, height = <%- height %>;
            var nodes = <%- JSON.stringify(colaNodes) %>;
            var edges = <%- JSON.stringify(colaEdges) %>;
            var constraints = <%- JSON.stringify(colaConstraints) %>;
            var groups = <%- JSON.stringify(colaGroups) %>;

            if (width && height && nodes && edges && constraints && groups) {
                setupLayout(d3, nodes, edges, constraints, groups, width, height);
            } else {
                console.error('Missing required data for layout');
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            const toggleExploreColButton = document.getElementById('toggleExploreCol');
            const toggleControlsColButton = document.getElementById('toggleControlsCol');
            const exploreCol = document.getElementById('exploreCol');
            const controlsCol = document.getElementById('controlsCol');

            // Toggle Explore Column
            toggleExploreColButton.addEventListener('click', function () {
                exploreCol.classList.toggle('hidden');
                toggleExploreColButton.textContent = exploreCol.classList.contains('hidden') ? 'Show Explore' : 'Hide Explore';
            });

            // Toggle Controls Column
            toggleControlsColButton.addEventListener('click', function () {
                controlsCol.classList.toggle('hidden');
                toggleControlsColButton.textContent = controlsCol.classList.contains('hidden') ? 'Show Controls' : 'Hide Controls';
            });

            


            // // And here as well.
            // let diagramDownloadButton = document.getElementById('diagramDownloadButton');
            // diagramDownloadButton.addEventListener('click', function () {
               
            // });

            




            // Instance download button.
            var openInstBtn = document.getElementById('instButton');
            var sourceContent = <%- JSON.stringify(instAsString) %>;
            var sourceFileName = "<%= sourceFileName %>";
            var blob = new Blob([sourceContent], { type: 'text/plain' });
            var url = URL.createObjectURL(blob);

            if (openInstBtn) {
                openInstBtn.addEventListener('click', function () {
                    window.open(url, '_blank');
                });
            }




        });
    </script>

    <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
        const config = {
            startOnLoad: true,
            flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },
            securityLevel: 'loose',
        };
        mermaid.initialize(config);

        window.stateclick = function (i) {
            // First, set the instance number's value to i
            document.getElementById('instancenumber').value = i;
            // Now submit the form
            document.getElementById('controlsForm').submit();
        };
    </script>
    <style>
        /* Hide elements with the hidden class */
        .hidden {
            display: none !important;
        }
    </style>
    
</head>

<body>
    <nav class="navbar navbar-light bg-light">
        <h4 class="navbar-brand">Cope and Drag</h4>

        <div class="btn-group" role="group" >
            <button id="toggleExploreCol" class="btn btn-outline-secondary">Hide Explore</button>
            <button id="toggleControlsCol" class="btn btn-outline-secondary">Hide Controls</button>

            <br>
            <button id="diagramDownloadButton" class="btn btn-outline-secondary" onclick="downloadHighResPNG(5);" >Download Diagram</button>
            <% if (instAsString) { %>
                <button id="instButton" class="btn btn-outline-secondary">As Forge Instance</button>
            <% } %>
        
            <br>
            <a href="https://sidprasad.github.io/copeanddrag/" target="_blank"><button class="btn btn-outline-secondary">Docs</button></a>
        </div>
    </nav>
    <% if (errors && errors.trim().length > 0) { %>
        
        <div id="error_messages" class="alert alert-danger">
            <h4>CnD Error</h4>
            <%- errors %>
        </div>
    <% } %>

    <div id="runtime_messages" class="container">


    </div>

    <div class="container-fluid">

        <%- include('temporalminimap') %>

        <div class="row">
            <div class="col" id="exploreCol" >

                <%- include('relationTable') %>

            </div>

            <div class="col">
                <%- include('diagramsvg') %>
            </div>

            <div class="col" id="controlsCol">
                <%- include('controls') %>
            </div>
                        

            

        </div>
        <div class="row">

        </div>
    </div>

</body>




</html>